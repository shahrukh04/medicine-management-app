import React, { useState, useEffect } from 'react';
import { db } from '../firebaseConfig';
import { collection, onSnapshot, doc, deleteDoc, updateDoc } from 'firebase/firestore';
import { toast } from 'react-toastify';
import { motion, AnimatePresence } from 'framer-motion';

const MedicineTable = () => {
  const [medicines, setMedicines] = useState([]);
  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'asc' });
  const [searchTerm, setSearchTerm] = useState('');
  const [loading, setLoading] = useState(true);
  const [selectedMedicine, setSelectedMedicine] = useState(null);

  // Stats calculations
  const totalMedicines = medicines.length;
  const totalValue = medicines.reduce((sum, med) => sum + (med.total_payment || 0), 0);
  const lowStockItems = medicines.filter(med => (med.quantity || 0) < 10).length;

  useEffect(() => {
    const unsubscribe = onSnapshot(
      collection(db, 'medicines'),
      (snapshot) => {
        const data = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
        setMedicines(data);
        setLoading(false);
      },
      (error) => {
        console.error("Error fetching medicines:", error);
        toast.error("Error loading medicines");
        setLoading(false);
      }
    );
    return unsubscribe;
  }, []);

  const handleSort = (key) => {
    setSortConfig((prev) => ({
      key,
      direction: prev.key === key && prev.direction === 'asc' ? 'desc' : 'asc',
    }));
  };

  const handleDelete = async (id) => {
    if (window.confirm('Are you sure you want to delete this medicine?')) {
      try {
        await deleteDoc(doc(db, 'medicines', id));
        toast.success('Medicine deleted successfully!');
      } catch (error) {
        console.error('Error deleting medicine:', error);
        toast.error('Error deleting medicine');
      }
    }
  };

  const handleEdit = (medicine) => {
    setSelectedMedicine(medicine);
  };

  const handleUpdateMedicine = async (e) => {
    e.preventDefault();
    if (!selectedMedicine) return;

    try {
      const medicineRef = doc(db, 'medicines', selectedMedicine.id);
      const updatedData = {
        cost: parseFloat(selectedMedicine.cost),
        quantity: parseInt(selectedMedicine.quantity),
        total_payment: parseFloat(selectedMedicine.cost) * parseInt(selectedMedicine.quantity)
      };

      await updateDoc(medicineRef, updatedData);
      setSelectedMedicine(null);
      toast.success('Medicine updated successfully!');
    } catch (error) {
      console.error('Error updating medicine:', error);
      toast.error('Error updating medicine');
    }
  };

  const filteredMedicines = medicines.filter(medicine =>
    medicine.medicine_name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const sortedMedicines = [...filteredMedicines].sort((a, b) => {
    if (!sortConfig.key) return 0;
    
    const aValue = a[sortConfig.key];
    const bValue = b[sortConfig.key];
    
    if (sortConfig.direction === 'asc') {
      return aValue > bValue ? 1 : -1;
    } else {
      return aValue < bValue ? 1 : -1;
    }
  });

  return (
    <div className="space-y-6">
      {/* Stats Section */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div className="bg-white rounded-xl shadow-md p-6 border border-gray-200">
          <div className="flex items-center">
            <div className="p-3 rounded-full bg-blue-100">
              <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M20 12H4"/>
              </svg>
            </div>
            <div className="ml-4">
              <h2 className="text-sm font-medium text-gray-600">Total Medicines</h2>
              <p className="text-2xl font-semibold text-gray-900">{totalMedicines}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-md p-6 border border-gray-200">
          <div className="flex items-center">
            <div className="p-3 rounded-full bg-green-100">
              <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
            </div>
            <div className="ml-4">
              <h2 className="text-sm font-medium text-gray-600">Total Value</h2>
              <p className="text-2xl font-semibold text-gray-900">₹{totalValue.toFixed(2)}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-md p-6 border border-gray-200">
          <div className="flex items-center">
            <div className="p-3 rounded-full bg-red-100">
              <svg className="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"/>
              </svg>
            </div>
            <div className="ml-4">
              <h2 className="text-sm font-medium text-gray-600">Low Stock Items</h2>
              <p className="text-2xl font-semibold text-gray-900">{lowStockItems}</p>
            </div>
          </div>
        </div>
      </div>

      {/* Search Bar */}
      <div className="mb-6">
        <input
          type="text"
          placeholder="Search medicines..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        />
      </div>

      {/* Table */}
      <div className="bg-white shadow-md rounded-lg overflow-hidden">
        <div className="overflow-x-auto">
          {loading ? (
            <div className="text-center py-4">Loading...</div>
          ) : (
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  {[
                    { key: 'medicine_name', label: 'Medicine Name' },
                    { key: 'cost', label: 'Cost' },
                    { key: 'quantity', label: 'Quantity' },
                    { key: 'total_payment', label: 'Total Payment' },
                    { key: 'purchase_date', label: 'Purchase Date' },
                    { key: 'expiry_date', label: 'Expiry Date' },
                    { key: 'actions', label: 'Actions' }
                  ].map((column) => (
                    <th
                      key={column.key}
                      onClick={() => column.key !== 'actions' && handleSort(column.key)}
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer"
                    >
                      {column.label}
                      {sortConfig.key === column.key && (
                        <span className="ml-2">
                          {sortConfig.direction === 'asc' ? '↑' : '↓'}
                        </span>
                      )}
                    </th>
                  ))}
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                <AnimatePresence>
                  {sortedMedicines.map((medicine) => (
                    <motion.tr
                      key={medicine.id}
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      exit={{ opacity: 0 }}
                    >
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {medicine.medicine_name}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        ₹{medicine.cost}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`px-3 py-1 inline-flex text-sm leading-5 font-semibold rounded-full ${
                          medicine.quantity < 10
                            ? 'bg-red-100 text-red-800'
                            : medicine.quantity < 20
                            ? 'bg-yellow-100 text-yellow-800'
                            : 'bg-green-100 text-green-800'
                        }`}>
                          {medicine.quantity}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        ₹{medicine.total_payment}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {new Date(medicine.purchase_date).toLocaleDateString('en-GB')}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {new Date(medicine.expiry_date).toLocaleDateString('en-GB')}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <button
                          onClick={() => handleEdit(medicine)}
                          className="text-indigo-600 hover:text-indigo-900 mr-4 transition-colors"
                        >
                          Edit
                        </button>
                        <button
                          onClick={() => handleDelete(medicine.id)}
                          className="text-red-600 hover:text-red-900 transition-colors"
                        >
                          Delete
                        </button>
                      </td>
                    </motion.tr>
                  ))}
                </AnimatePresence>
              </tbody>
              <tfoot className="bg-gray-50">
                <tr>
                  <td colSpan="3" className="px-6 py-4 text-sm font-medium text-gray-900">
                    Total
                  </td>
                  <td className="px-6 py-4 text-sm font-medium text-gray-900">
                    ₹{totalValue.toFixed(2)}
                  </td>
                  <td colSpan="3"></td>
                </tr>
              </tfoot>
            </table>
          )}
        </div>
      </div>

      {/* Edit Modal */}
      {selectedMedicine && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.9 }}
            className="bg-white rounded-lg p-6 max-w-md w-full"
          >
            <h3 className="text-lg font-semibold mb-4">Edit Medicine</h3>
            <form onSubmit={handleUpdateMedicine} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700">Cost</label>
                <input
                  type="number"
                  value={selectedMedicine.cost}
                  onChange={(e) => setSelectedMedicine({
                    ...selectedMedicine,
                    cost: e.target.value
                  })}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">Quantity</label>
                <input
                  type="number"
                  value={selectedMedicine.quantity}
                  onChange={(e) => setSelectedMedicine({
                    ...selectedMedicine,
                    quantity: e.target.value
                  })}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                />
              </div>
              <div className="flex justify-end space-x-3">
                <button
                  type="button"
                  onClick={() => setSelectedMedicine(null)}
                  className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-md"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="px-4 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-md"
                >
                  Save Changes
                </button>
              </div>
            </form>
          </motion.div>
        </div>
      )}
    </div>
  );
};

export default MedicineTable;

















app
// import React, { useState, useEffect } from 'react';
// import { BrowserRouter, Routes, Route } from 'react-router-dom';
// import './index.css';
// import { Toaster } from 'react-hot-toast';
// import Login from './components/Login';
// import Register from './components/Register';
// import Dashboard from './components/Dashboard';
// import MedicineTable from './components/MedicineTable';
// import MedicineForm from './components/MedicineForm';
// import { initDB, dbOperations } from './utils/indexedDB';

// const App = () => {
//   const [medicines, setMedicines] = useState([]);
//   const [db, setDB] = useState(null);

//   // Initialize IndexedDB and load initial data
//   useEffect(() => {
//     const setupDB = async () => {
//       try {
//         const database = await initDB();
//         setDB(database);
//         const data = await dbOperations.getAllMedicines(database);
//         setMedicines(data);
//       } catch (error) {
//         console.error("Error setting up database:", error);
//       }
//     };
//     setupDB();
//   }, []);

//   // Function to handle adding new medicine
//   const handleAddMedicine = async (newMedicine) => {
//     try {
//       await dbOperations.addMedicine(db, newMedicine);
//       // Get fresh data from the database after adding
//       const updatedMedicines = await dbOperations.getAllMedicines(db);
//       setMedicines(updatedMedicines);
//     } catch (error) {
//       console.error("Error adding medicine:", error);
//     }
//   };

//   return (
//     <BrowserRouter>
//       <div className="min-h-screen bg-gray-50">
//         <Toaster
//           position="top-right"
//           toastOptions={{
//             success: {
//               style: {
//                 background: '#34D399',
//                 color: 'white',
//               },
//             },
//             error: {
//               style: {
//                 background: '#EF4444',
//                 color: 'white',
//               },
//             },
//             loading: {
//               style: {
//                 background: '#3B82F6',
//                 color: 'white',
//               },
//             },
//             style: {
//               border: '1px solid #E5E7EB',
//               padding: '16px',
//               borderRadius: '8px',
//             },
//             duration: 3000,
//           }}
//         />
        
//         <Routes>
//           <Route path="/" element={<Login />} />
//           <Route path="/login" element={<Login />} />
//           <Route path="/register" element={<Register />} />
//           <Route path="/dashboard" element={<Dashboard />}>
//             <Route 
//               index 
//               element={
//                 <MedicineTable 
//                   medicines={medicines} 
//                   setMedicines={setMedicines}
//                   db={db} 
//                 />
//               } 
//             />
//             <Route 
//               path="add-medicine" 
//               element={
//                 <MedicineForm 
//                   onAddMedicine={handleAddMedicine}
//                   setMedicines={setMedicines}
//                   db={db}
//                 />
//               } 
//             />
//             <Route 
//               path="medicines" 
//               element={
//                 <MedicineTable 
//                   medicines={medicines} 
//                   setMedicines={setMedicines}
//                   db={db}
//                 />
//               } 
//             />
//           </Route>
//         </Routes>
//       </div>
//     </BrowserRouter>
//   );
// };

// export default App;

